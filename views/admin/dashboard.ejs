<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Course Registration System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            color: #333;
        }
        
        /* Dashboard Container */
        .dashboard-container {
            display: flex;
            min-height: 100vh;
        }
        
        /* Sidebar Styles - Matching Student Interface */
        .sidebar {
            width: 250px;
            background-color: #2d3e50;
            position: fixed;
            height: 100vh;
            color: white;
        }
        .nav-list {
            list-style: none;
            padding: 0;
            margin: 0;
        }
        .nav-item {
            margin: 0;
        }
        .nav-link {
            display: flex;
            align-items: center;
            padding: 15px 20px;
            color: white;
            text-decoration: none;
            transition: background-color 0.3s;
            border-left: 4px solid transparent;
        }
        .nav-link:hover, .nav-link.active {
            background-color: rgba(255, 255, 255, 0.1);
            border-left: 4px solid #3498db;
        }
        .nav-link i {
            margin-right: 10px;
            width: 20px;
            text-align: center;
        }
        
        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: 250px;
            padding: 20px;
        }
        
        /* Header Styles */
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
        }
        .header h1 {
            font-size: 28px;
            color: #333;
        }
        
        /* Logout Button */
        .logout-btn {
            padding: 8px 16px;
            background-color: #e74c3c;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        .logout-btn:hover {
            background-color: #c0392b;
        }
        
        /* Stats Grid */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        .card {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }
        .card-title {
            margin: 0 0 10px 0;
            color: #555;
            font-size: 16px;
        }
        .card-text {
            margin: 0;
            font-size: 24px;
            font-weight: bold;
            color: #3498db;
        }
        
        /* Table Container */
        .table-container {
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-bottom: 30px;
            overflow-x: auto;
        }
        .table-container h2 {
            margin-bottom: 15px;
            color: #333;
            font-size: 20px;
        }
        
        /* Table Styles */
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #eee;
        }
        th {
            background-color: #f8f9fa;
            color: #555;
            font-weight: bold;
        }
        tr:hover {
            background-color: #f8f9fa;
        }
        
        /* Action Buttons */
        .action-buttons {
            display: flex;
            gap: 12px;
        }
        .action-btn {
            background: none;
            border: none;
            cursor: pointer;
            color: #555;
            font-size: 16px;
            transition: color 0.2s;
        }
        .action-btn.view:hover {
            color: #3498db;
        }
        .action-btn.edit:hover {
            color: #f39c12;
        }
        .action-btn.delete:hover {
            color: #e74c3c;
        }
        
        /* Search Container */
        .search-container {
            margin-bottom: 20px;
            display: flex;
            gap: 10px;
        }
        .search-input {
            flex: 1;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        .btn-search {
            background-color: #3498db;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0 15px;
            cursor: pointer;
        }
        
        /* Toast Notification */
        .toast {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 15px 25px;
            border-radius: 4px;
            color: white;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 1000;
        }
        .toast.show {
            opacity: 1;
        }
        .toast.error {
            background-color: #e74c3c;
        }
        .toast.success {
            background-color: #2ecc71;
        }
        
        /* No results message */
        .no-results {
            text-align: center;
            padding: 20px;
            color: #777;
            font-style: italic;
        }
    </style>
</head>
<body>
    <div class="dashboard-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <ul class="nav-list">
                <li class="nav-item">
                    <a href="/admin/dashboard" class="nav-link active">
                        <i class="fas fa-tachometer-alt"></i> Overview
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/students" class="nav-link">
                        <i class="fas fa-user-graduate"></i> Students
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/courses" class="nav-link">
                        <i class="fas fa-book"></i> Courses
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/departments" class="nav-link">
                        <i class="fas fa-building"></i> Departments
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/registrations" class="nav-link">
                        <i class="fas fa-clipboard-list"></i> Registrations
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/reports" class="nav-link">
                        <i class="fas fa-chart-bar"></i> Reports
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/settings" class="nav-link">
                        <i class="fas fa-cog"></i> Settings
                    </a>
                </li>
                <li class="nav-item">
                    <a href="/admin/logout" class="nav-link">
                        <i class="fas fa-sign-out-alt"></i> Logout
                    </a>
                </li>
            </ul>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <h1 id="welcomeHeader">Welcome, Admin</h1>
                <button id="logoutBtn" class="logout-btn">
                    <i class="fas fa-sign-out-alt"></i> Logout
                </button>
            </div>

            <!-- Stats Grid -->
            <div class="stats-grid">
                <div class="card">
                    <h3 class="card-title">Total Students</h3>
                    <p class="card-text" id="totalStudents">0</p>
                </div>
                <div class="card">
                    <h3 class="card-title">Total Courses</h3>
                    <p class="card-text" id="totalCourses">0</p>
                </div>
                <div class="card">
                    <h3 class="card-title">Active Registrations</h3>
                    <p class="card-text" id="activeRegistrations">0</p>
                </div>
                <div class="card">
                    <h3 class="card-title">Departments</h3>
                    <p class="card-text" id="totalDepartments">0</p>
                </div>
            </div>

            <!-- Recent Students -->
            <div class="table-container">
                <h2>Recent Students</h2>
                <div class="search-container">
                    <input type="text" id="studentSearch" class="search-input" placeholder="Search students...">
                    <button id="studentSearchBtn" class="btn-search"><i class="fas fa-search"></i></button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Roll Number</th>
                            <th>Name</th>
                            <th>Department</th>
                            <th>Email</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="studentsTableBody">
                        <!-- Student data will be populated dynamically -->
                    </tbody>
                </table>
            </div>

            <!-- Recent Courses -->
            <div class="table-container">
                <h2>Recent Courses</h2>
                <div class="search-container">
                    <input type="text" id="courseSearch" class="search-input" placeholder="Search courses...">
                    <button id="courseSearchBtn" class="btn-search"><i class="fas fa-search"></i></button>
                </div>
                <table>
                    <thead>
                        <tr>
                            <th>Course Code</th>
                            <th>Course Name</th>
                            <th>Department</th>
                            <th>Credits</th>
                            <th>Status</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody id="coursesTableBody">
                        <!-- Course data will be populated dynamically -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Toast notification -->
    <div id="toast" class="toast"></div>

    <script>
        // DOM Elements
        const logoutBtn = document.getElementById('logoutBtn');
        const toast = document.getElementById('toast');
        const welcomeHeader = document.getElementById('welcomeHeader');
        const totalStudentsEl = document.getElementById('totalStudents');
        const totalCoursesEl = document.getElementById('totalCourses');
        const activeRegistrationsEl = document.getElementById('activeRegistrations');
        const totalDepartmentsEl = document.getElementById('totalDepartments');
        const studentsTableBody = document.getElementById('studentsTableBody');
        const coursesTableBody = document.getElementById('coursesTableBody');
        const studentSearch = document.getElementById('studentSearch');
        const courseSearch = document.getElementById('courseSearch');
        const studentSearchBtn = document.getElementById('studentSearchBtn');
        const courseSearchBtn = document.getElementById('courseSearchBtn');

        // Check authentication and load admin data on page load
        document.addEventListener('DOMContentLoaded', async () => {
            const adminToken = localStorage.getItem('adminToken');
            if (!adminToken) {
                window.location.href = '/admin/login';
                return;
            }

            try {
                // Fetch admin user data
                const adminResponse = await fetch('/api/admin/profile', {
                    headers: {
                        'Authorization': `Bearer ${adminToken}`
                    }
                });
                
                if (adminResponse.ok) {
                    const adminData = await adminResponse.json();
                    // Update welcome message with admin name
                    welcomeHeader.textContent = `Welcome, ${adminData.name}`;
                }
                
                // Load dashboard data
                await loadDashboardData();
                
                // Load initial student and course data
                await loadStudents();
                await loadCourses();
                
                // Set up search event listeners
                setupSearchListeners();
                
            } catch (error) {
                console.error('Error initializing dashboard:', error);
                showToast('Failed to load dashboard data', 'error');
            }
        });

        // Load Dashboard Statistics
        async function loadDashboardData() {
            try {
                const response = await fetch('/api/admin/dashboard/stats', {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    totalStudentsEl.textContent = data.totalStudents || 0;
                    totalCoursesEl.textContent = data.totalCourses || 0;
                    activeRegistrationsEl.textContent = data.activeRegistrations || 0;
                    totalDepartmentsEl.textContent = data.totalDepartments || 0;
                } else {
                    throw new Error('Failed to fetch dashboard stats');
                }
            } catch (error) {
                console.error('Error loading dashboard stats:', error);
                showToast('Failed to load statistics', 'error');
            }
        }

        // Load Students
        async function loadStudents(searchQuery = '') {
            try {
                let url = '/api/admin/students/recent';
                if (searchQuery) {
                    url = `/api/admin/students/search?q=${encodeURIComponent(searchQuery)}`;
                }
                
                const response = await fetch(url, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    renderStudentsTable(data.students || []);
                } else {
                    throw new Error('Failed to fetch students');
                }
            } catch (error) {
                console.error('Error loading students:', error);
                showToast('Failed to load students', 'error');
            }
        }

        // Load Courses
        async function loadCourses(searchQuery = '') {
            try {
                let url = '/api/admin/courses/recent';
                if (searchQuery) {
                    url = `/api/admin/courses/search?q=${encodeURIComponent(searchQuery)}`;
                }
                
                const response = await fetch(url, {
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                    }
                });
                
                if (response.ok) {
                    const data = await response.json();
                    renderCoursesTable(data.courses || []);
                } else {
                    throw new Error('Failed to fetch courses');
                }
            } catch (error) {
                console.error('Error loading courses:', error);
                showToast('Failed to load courses', 'error');
            }
        }

        // Set up search listeners
        function setupSearchListeners() {
            // Student search with debounce
            let studentTimer;
            studentSearch.addEventListener('input', (e) => {
                clearTimeout(studentTimer);
                studentTimer = setTimeout(() => {
                    loadStudents(e.target.value);
                }, 300);
            });
            
            studentSearchBtn.addEventListener('click', () => {
                loadStudents(studentSearch.value);
            });
            
            // Course search with debounce
            let courseTimer;
            courseSearch.addEventListener('input', (e) => {
                clearTimeout(courseTimer);
                courseTimer = setTimeout(() => {
                    loadCourses(e.target.value);
                }, 300);
            });
            
            courseSearchBtn.addEventListener('click', () => {
                loadCourses(courseSearch.value);
            });
        }

        // Render Students Table
        function renderStudentsTable(students) {
            studentsTableBody.innerHTML = '';
            
            if (students.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="6" class="no-results">No students found</td>`;
                studentsTableBody.appendChild(row);
                return;
            }
            
            students.forEach(student => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${student.rollNumber || '-'}</td>
                    <td>${student.name || '-'}</td>
                    <td>${student.department || '-'}</td>
                    <td>${student.email || '-'}</td>
                    <td>${student.status || 'Active'}</td>
                    <td class="action-buttons">
                        <button class="action-btn view" data-id="${student._id}" title="View">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn edit" data-id="${student._id}" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn delete" data-id="${student._id}" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                studentsTableBody.appendChild(row);
            });
            
            // Add event listeners for student action buttons
            studentsTableBody.querySelectorAll('.action-btn.view').forEach(btn => {
                btn.addEventListener('click', () => viewStudent(btn.dataset.id));
            });
            
            studentsTableBody.querySelectorAll('.action-btn.edit').forEach(btn => {
                btn.addEventListener('click', () => editStudent(btn.dataset.id));
            });
            
            studentsTableBody.querySelectorAll('.action-btn.delete').forEach(btn => {
                btn.addEventListener('click', () => deleteStudent(btn.dataset.id));
            });
        }

        // Render Courses Table
        function renderCoursesTable(courses) {
            coursesTableBody.innerHTML = '';
            
            if (courses.length === 0) {
                const row = document.createElement('tr');
                row.innerHTML = `<td colspan="6" class="no-results">No courses found</td>`;
                coursesTableBody.appendChild(row);
                return;
            }
            
            courses.forEach(course => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${course.code || '-'}</td>
                    <td>${course.name || '-'}</td>
                    <td>${course.department || '-'}</td>
                    <td>${course.credits || '-'}</td>
                    <td>${course.status || 'Active'}</td>
                    <td class="action-buttons">
                        <button class="action-btn view" data-id="${course._id}" title="View">
                            <i class="fas fa-eye"></i>
                        </button>
                        <button class="action-btn edit" data-id="${course._id}" title="Edit">
                            <i class="fas fa-edit"></i>
                        </button>
                        <button class="action-btn delete" data-id="${course._id}" title="Delete">
                            <i class="fas fa-trash"></i>
                        </button>
                    </td>
                `;
                coursesTableBody.appendChild(row);
            });
            
            // Add event listeners for course action buttons
            coursesTableBody.querySelectorAll('.action-btn.view').forEach(btn => {
                btn.addEventListener('click', () => viewCourse(btn.dataset.id));
            });
            
            coursesTableBody.querySelectorAll('.action-btn.edit').forEach(btn => {
                btn.addEventListener('click', () => editCourse(btn.dataset.id));
            });
            
            coursesTableBody.querySelectorAll('.action-btn.delete').forEach(btn => {
                btn.addEventListener('click', () => deleteCourse(btn.dataset.id));
            });
        }

        // Student action functions
        function viewStudent(id) {
            window.location.href = `/admin/students/${id}`;
        }

        function editStudent(id) {
            window.location.href = `/admin/students/${id}/edit`;
        }

        async function deleteStudent(id) {
            if (confirm('Are you sure you want to delete this student?')) {
                try {
                    const response = await fetch(`/api/admin/students/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    
                    if (response.ok) {
                        showToast('Student deleted successfully', 'success');
                        // Reload dashboard data and students
                        await loadDashboardData();
                        await loadStudents(studentSearch.value);
                    } else {
                        const data = await response.json();
                        showToast(data.message || 'Failed to delete student', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting student:', error);
                    showToast('An error occurred while deleting the student', 'error');
                }
            }
        }

        // Course action functions
        function viewCourse(id) {
            window.location.href = `/admin/courses/${id}`;
        }

        function editCourse(id) {
            window.location.href = `/admin/courses/${id}/edit`;
        }

        async function deleteCourse(id) {
            if (confirm('Are you sure you want to delete this course?')) {
                try {
                    const response = await fetch(`/api/admin/courses/${id}`, {
                        method: 'DELETE',
                        headers: {
                            'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                        }
                    });
                    
                    if (response.ok) {
                        showToast('Course deleted successfully', 'success');
                        // Reload dashboard data and courses
                        await loadDashboardData();
                        await loadCourses(courseSearch.value);
                    } else {
                        const data = await response.json();
                        showToast(data.message || 'Failed to delete course', 'error');
                    }
                } catch (error) {
                    console.error('Error deleting course:', error);
                    showToast('An error occurred while deleting the course', 'error');
                }
            }
        }

        // Logout function
        logoutBtn.addEventListener('click', async () => {
            try {
                const response = await fetch('/api/admin/logout', {
                    method: 'POST',
                    headers: {
                        'Authorization': `Bearer ${localStorage.getItem('adminToken')}`
                    }
                });
                
                // Clear storage and redirect regardless of response
                localStorage.removeItem('adminToken');
                document.cookie = 'adminToken=; path=/; expires=Thu, 01 Jan 1970 00:00:00 GMT';
                window.location.href = '/admin/login';
            } catch (error) {
                console.error('Logout error:', error);
                // Even if there's an error, still clear local data and redirect
                localStorage.removeItem('adminToken');
                window.location.href = '/admin/login';
            }
        });

        // Show toast notification
        function showToast(message, type = 'success') {
            const toast = document.getElementById('toast');
            toast.textContent = message;
            toast.className = `toast ${type} show`;
            
            setTimeout(() => {
                toast.className = toast.className.replace('show', '');
            }, 3000);
        }
    </script>
</body>
</html>