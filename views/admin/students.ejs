<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management - Admin Dashboard</title>
    <link href="/css/admin.css" rel="stylesheet">
    <style>
       /* Define CSS variables with fallback colors */
:root {
    --border-color: #e0e0e0;
    --bg-secondary: #f8f9fa;
    --card-bg: #ffffff;
    --text-secondary: #6c757d;
    --text-primary: #212529;
    --accent-color: #007bff;
}

/* Student management styles */
.student-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 1rem;
}

.student-table th,
.student-table td {
    padding: 0.75rem;
    text-align: left;
    border-bottom: 1px solid var(--border-color);
}

.student-table th {
    background-color: var(--bg-secondary);
    font-weight: bold;
}

.student-info {
    background-color: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1.5rem;
    margin-bottom: 2rem;
}

.info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
    margin-bottom: 1rem;
}

.info-group {
    display: flex;
    flex-direction: column;
}

.info-label {
    color: var(--text-secondary);
    margin-bottom: 0.5rem;
}

.info-value {
    color: var(--text-primary);
}

.course-list {
    margin-top: 1rem;
}

.course-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background-color: var(--bg-secondary);
    border-radius: 4px;
    margin-bottom: 0.5rem;
}

.course-info {
    display: flex;
    flex-direction: column;
}

.course-code {
    font-weight: bold;
    color: var(--text-primary);
}

.course-name {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

.action-buttons {
    display: flex;
    gap: 0.5rem;
}

.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.2s;
}

.btn-primary {
    background-color: var(--accent-color);
    color: white;
}

.btn-danger {
    background-color: rgba(220, 53, 69, 0.3);
    color: #dc3545;
}

.btn-success {
    background-color: rgba(40, 167, 69, 0.3);
    color: #28a745;
}

.btn:hover {
    opacity: 0.9;
}

/* Modal styles - Fixed with explicit background color */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
}

/* Modal styles - Update to make content scrollable */
.modal-content {
    position: relative;
    background-color: #ffffff;
    margin: 10% auto;
    padding: 2rem;
    width: 90%;
    max-width: 600px;
    max-height: 80vh; /* Set max height */
    overflow-y: auto; /* Enable vertical scrolling */
    border-radius: 8px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

body.modal-open {
    overflow: hidden;
}

.close {
    position: absolute;
    right: 1rem;
    top: 1rem;
    font-size: 1.5rem;
    cursor: pointer;
    color: var(--text-secondary);
}

.search-box {
    margin-bottom: 1rem;
}

.search-input {
    width: 100%;
    padding: 0.5rem;
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    color: var(--text-primary);
}

.search-input:focus {
    outline: none;
    border-color: var(--accent-color);
}

.prerequisite-status {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.status-dot {
    width: 10px;
    height: 10px;
    border-radius: 50%;
}

.status-dot.completed {
    background-color: #28a745;
}

.status-dot.pending {
    background-color: #ffc107;
}

/* Course search results */
.search-results {
    margin-top: 1rem;
    max-height: 200px;
    overflow-y: auto;
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.course-result-item {
    padding: 0.75rem;
    border-bottom: 1px solid var(--border-color);
    cursor: pointer;
}

.course-result-item:hover {
    background-color: var(--bg-secondary);
}

.enrollment-status {
    font-size: 0.9rem;
    color: var(--text-secondary);
}

.enrollment-status.full {
    color: #dc3545;
}

.warning {
    color: #dc3545;
    margin-top: 0.5rem;
    font-size: 0.9rem;
}

/* Toast notifications */
.toast {
    visibility: hidden;
    position: fixed;
    bottom: 30px;
    right: 30px;
    min-width: 250px;
    padding: 15px;
    border-radius: 4px;
    color: white;
    z-index: 9999;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
}

.toast.success {
    background-color: #28a745;
}

.toast.danger {
    background-color: #dc3545;
}

.toast.show {
    visibility: visible;
    animation: fadein 0.5s, fadeout 0.5s 2.5s;
}

@keyframes fadein {
    from {bottom: 0; opacity: 0;}
    to {bottom: 30px; opacity: 1;}
}

@keyframes fadeout {
    from {bottom: 30px; opacity: 1;}
    to {bottom: 0; opacity: 0;}
}

/* Fix for the remove button */
.remove-btn {
    background-color: rgba(220, 53, 69, 0.3);
    color: #dc3545;
    border: none;
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    cursor: pointer;
}

.remove-btn:hover {
    background-color: rgba(220, 53, 69, 0.5);
}
    </style>
</head>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Student Management - Admin Dashboard</title>
    <link href="/css/admin.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav id="sidebar" class="sidebar">
                <div class="position-sticky">
                    <ul class="nav">
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/dashboard">Dashboard</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/courses">Courses</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active" href="/admin/students">Students</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="/admin/reports">Reports</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" href="#" id="logoutBtn">Logout</a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main>
                <div id="content">
                    <h2>Student Management</h2>

                    <!-- Search Box -->
                    <div class="search-box">
                        <input type="text" class="search-input" id="searchInput" placeholder="Search by roll number or name...">
                    </div>

                    <!-- Student List -->
                    <div class="card">
                        <div class="card-header">
                            <h3>Student List</h3>
                        </div>
                        <div class="card-body">
                            <table class="student-table">
                                <thead>
                                    <tr>
                                        <th>Roll Number</th>
                                        <th>Name</th>
                                        <th>Department</th>
                                        <th>Year</th>
                                        <th>Registered Courses</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="studentList">
                                    <!-- Students will be dynamically added here -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Student Details Modal -->
    <div id="studentModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Student Details</h3>
            <div id="studentInfo" class="student-info">
                <!-- Student info will be dynamically added here -->
            </div>
            <div class="course-list">
                <h4>Registered Courses</h4>
                <div id="registeredCourses">
                    <!-- Registered courses will be dynamically added here -->
                </div>
            </div>
        </div>
    </div>

    <!-- Override Modal -->
    <div id="overrideModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h3>Add Course (Admin Override)</h3>
            <div id="overrideStudentInfo" class="student-info">
                <!-- Student info will be added here dynamically -->
            </div>
            <div class="course-search">
                <h4>Search Courses</h4>
                <input type="text" id="courseSearch" placeholder="Search by course code or name...">
                <div id="courseSearchResults" class="search-results">
                    <!-- Course search results will be added here dynamically -->
                </div>
            </div>

            <div id="selectedCourse" style="display: none;">
                <h4>Selected Course</h4>
                <div id="selectedCourseInfo"></div>
                <div id="enrollmentWarning" class="warning"></div>
            </div>
            <div class="modal-actions">
                <button id="confirmOverrideBtn" class="btn btn-primary" disabled>Confirm Override</button>
            </div>
        </div>
    </div>


    <script>
        // Check for token and redirect if not found
const token = localStorage.getItem('adminToken');
if (!token) {
    window.location.href = '/admin/login';
}

// Add token to all fetch requests
async function fetchWithAuth(url, options = {}) {
    const apiUrl = url.startsWith('/api/admin') ? url : `/api/admin${url}`;

    const token = localStorage.getItem('adminToken');
    if (!token) {
        window.location.href = '/admin/login';
        throw new Error('No token found');
    }

    const headers = new Headers({
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
    });

    try {
        const response = await fetch(url, {
            method: options.method || 'GET',
            headers: headers,
            body: options.body ? JSON.stringify(options.body) : undefined
        });

        if (response.status === 401 || response.status === 403) {
            localStorage.removeItem('adminToken');
            window.location.href = '/admin/login';
            return null;
        }

        return response;
    } catch (error) {
        console.error('Fetch error:', error);
        showToast('Network error: ' + error.message, 'danger');
        throw error;
    }
}
// Add this to your modal open function
function openModal(modalId) {
    document.getElementById(modalId).style.display = "block";
    document.body.classList.add('modal-open');
}

// Add this to your modal close function
function closeModal(modalId) {
    document.getElementById(modalId).style.display = "none";
    document.body.classList.remove('modal-open');
}

// Load students
async function loadStudents() {
    try {
        console.log('Loading students data...');
        const response = await fetchWithAuth('/api/admin/students');
        if (!response) return;
        
        if (!response.ok) {
            throw new Error(`Server responded with status: ${response.status}`);
        }
        
        const students = await response.json();
        console.log('Students data loaded:', students.length, 'students found');
        displayStudents(students);
    } catch (error) {
        console.error('Error loading students:', error);
        showToast('Error loading students: ' + error.message, 'danger');
    }
}

// Display students in the table
function displayStudents(students) {
    const studentList = document.getElementById('studentList');
    if (!studentList) {
        console.error('Student list element not found');
        return;
    }
    
    studentList.innerHTML = '';
    
    if (!Array.isArray(students) || students.length === 0) {
        studentList.innerHTML = '<tr><td colspan="6">No students found</td></tr>';
        return;
    }
    
    students.forEach(student => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${student.rollNumber || 'N/A'}</td>
            <td>${student.name || 'N/A'}</td>
            <td>${student.department || 'N/A'}</td>
            <td>${student.year || 'N/A'}</td>
            <td>${(student.registeredCourses && student.registeredCourses.length) || 0}</td>
            <td class="action-buttons">
                <button class="btn btn-primary" onclick="viewStudent('${student._id}')">View</button>
                <button class="btn btn-success" onclick="openOverrideModal('${student._id}')">Add Course</button>
            </td>
        `;
        studentList.appendChild(row);
    });
}

// View student details
async function viewStudent(studentId) {
    try {
        console.log('Fetching student details for ID:', studentId);
        const response = await fetchWithAuth(`/api/admin/students/${studentId}`);
        if (!response) return;
        
        if (!response.ok) {
            throw new Error(`Server responded with status: ${response.status}`);
        }

        const student = await response.json();
        console.log('Student details loaded:', student);
        displayStudentDetails(student);
        
        const modal = document.getElementById('studentModal');
        if (modal) {
            modal.style.display = 'block';
        } else {
            console.error('Student modal element not found');
        }
    } catch (error) {
        console.error('Error loading student details:', error);
        showToast('Error loading student details: ' + error.message, 'danger');
    }
}

// Display student details in modal
function displayStudentDetails(student) {
    const studentInfo = document.getElementById('studentInfo');
    if (!studentInfo) {
        console.error('Student info element not found');
        return;
    }
    
    // Safely access student properties
    const rollNumber = student.rollNumber || 'N/A';
    const name = student.name || 'N/A';
    const email = student.email || 'N/A';
    const department = student.department || 'N/A';
    const year = student.year || 'N/A';
    
    studentInfo.innerHTML = `
        <div class="info-grid">
            <div class="info-group">
                <span class="info-label">Roll Number</span>
                <span class="info-value">${rollNumber}</span>
            </div>
            <div class="info-group">
                <span class="info-label">Name</span>
                <span class="info-value">${name}</span>
            </div>
            <div class="info-group">
                <span class="info-label">Email</span>
                <span class="info-value">${email}</span>
            </div>
            <div class="info-group">
                <span class="info-label">Department</span>
                <span class="info-value">${department}</span>
            </div>
            <div class="info-group">
                <span class="info-label">Year</span>
                <span class="info-value">${year}</span>
            </div>
        </div>
    `;

    const registeredCourses = document.getElementById('registeredCourses');
    if (!registeredCourses) {
        console.error('Registered courses element not found');
        return;
    }
    
    registeredCourses.innerHTML = '';
    
    if (!student.registeredCourses || student.registeredCourses.length === 0) {
        registeredCourses.innerHTML = '<p>No courses registered</p>';
        return;
    }

    // Display registered courses
    student.registeredCourses.forEach(course => {
        const courseElement = document.createElement('div');
        courseElement.className = 'course-item';
        
        // Check if prerequisites is an array before mapping
        const prerequisiteStatus = (course.prerequisites && Array.isArray(course.prerequisites) && course.prerequisites.length > 0) ? 
            course.prerequisites.map(prereq => {
                const isCompleted = prereq.isCompleted || false;
                const code = prereq.code || 'Prerequisite';
                return `<div class="status-dot ${isCompleted ? 'completed' : 'pending'}" 
                    title="${code}: ${isCompleted ? 'Completed' : 'Not completed'}"></div>`;
            }).join('') : '';
        
        courseElement.innerHTML = `
            <div class="course-info">
                <span class="course-code">${course.code || 'N/A'}</span>
                <span class="course-name">${course.name || 'N/A'}</span>
            </div>
            <div class="prerequisite-status">
                ${prerequisiteStatus}
                <button class="remove-btn" onclick="removeCourse('${student._id}', '${course._id}')">Remove</button>
            </div>
        `;
        
        registeredCourses.appendChild(courseElement);
    });

    // Display potential schedule if exists
    if (student.potentialSchedule && Array.isArray(student.potentialSchedule) && student.potentialSchedule.length > 0) {
        const potentialTitle = document.createElement('h4');
        potentialTitle.textContent = 'Pending Course Requests';
        registeredCourses.appendChild(potentialTitle);

        student.potentialSchedule.forEach(async (item) => {
            if (!item.courseId) {
                console.warn('Course ID missing in potential schedule item', item);
                return;
            }
            
            try {
                // Fetch course details for each potential course
                const response = await fetchWithAuth(`/api/admin/courses/${item.courseId}`);
                if (!response || !response.ok) return;
                
                const course = await response.json();
                
                const courseElement = document.createElement('div');
                courseElement.className = 'course-item';
                courseElement.innerHTML = `
                    <div class="course-info">
                        <span class="course-code">${course.code || 'N/A'}</span>
                        <span class="course-name">${course.name || 'N/A'}</span>
                        <span class="course-status">(Status: ${item.status || 'Pending'})</span>
                    </div>
                    <div class="action-buttons">
                        <button class="btn btn-success" onclick="approveRequest('${student._id}', '${item.courseId}')">Approve</button>
                        <button class="btn btn-danger" onclick="rejectRequest('${student._id}', '${item.courseId}')">Reject</button>
                    </div>
                `;
                
                registeredCourses.appendChild(courseElement);
            } catch (error) {
                console.error('Error fetching course details:', error);
            }
        });
    }
}

// Approve course request
async function approveRequest(studentId, courseId) {
    try {
        const response = await fetchWithAuth(`/api/admin/students/${studentId}/approveRequest`, {
            method: 'POST',
            body: { courseId }
        });
        
        if (!response || !response.ok) {
            throw new Error(`Server responded with status: ${response?.status}`);
        }
        
        const data = await response.json();
        showToast('Course request approved', 'success');
        
        // Refresh student details
        viewStudent(studentId);
        
        // Refresh student list
        loadStudents();
    } catch (error) {
        console.error('Error approving request:', error);
        showToast('Error approving request: ' + error.message, 'danger');
    }
}

// Reject course request
async function rejectRequest(studentId, courseId) {
    try {
        const response = await fetchWithAuth(`/api/admin/students/${studentId}/rejectRequest`, {
            method: 'POST',
            body: { courseId }
        });
        
        if (!response || !response.ok) {
            throw new Error(`Server responded with status: ${response?.status}`);
        }
        
        const data = await response.json();
        showToast('Course request rejected', 'success');
        
        // Refresh student details
        viewStudent(studentId);
        
        // Refresh student list
        loadStudents();
    } catch (error) {
        console.error('Error rejecting request:', error);
        showToast('Error rejecting request: ' + error.message, 'danger');
    }
}

// Open override modal
let currentStudentId = null;
let selectedCourseId = null;

async function openOverrideModal(studentId) {
    currentStudentId = studentId;
    selectedCourseId = null;
    
    try {
        console.log('Opening override modal for student ID:', studentId);
        const response = await fetchWithAuth(`/api/admin/students/${studentId}`);
        if (!response || !response.ok) {
            throw new Error(`Server responded with status: ${response?.status}`);
        }

        const student = await response.json();
        console.log('Student data for override:', student);
        
        // Display student info in override modal
        const overrideStudentInfo = document.getElementById('overrideStudentInfo');
        if (!overrideStudentInfo) {
            console.error('Override student info element not found');
            return;
        }
        
        overrideStudentInfo.innerHTML = `
            <div class="info-grid">
                <div class="info-group">
                    <span class="info-label">Roll Number</span>
                    <span class="info-value">${student.rollNumber || 'N/A'}</span>
                </div>
                <div class="info-group">
                    <span class="info-label">Name</span>
                    <span class="info-value">${student.name || 'N/A'}</span>
                </div>
                <div class="info-group">
                    <span class="info-label">Department</span>
                    <span class="info-value">${student.department || 'N/A'}</span>
                </div>
                <div class="info-group">
                    <span class="info-label">Year</span>
                    <span class="info-value">${student.year || 'N/A'}</span>
                </div>
            </div>
        `;
        
        // Reset course search
        const courseSearch = document.getElementById('courseSearch');
        const courseSearchResults = document.getElementById('courseSearchResults');
        const selectedCourse = document.getElementById('selectedCourse');
        const confirmOverrideBtn = document.getElementById('confirmOverrideBtn');
        
        if (courseSearch) courseSearch.value = '';
        if (courseSearchResults) courseSearchResults.innerHTML = '';
        if (selectedCourse) selectedCourse.style.display = 'none';
        if (confirmOverrideBtn) confirmOverrideBtn.disabled = true;
        
        const modal = document.getElementById('overrideModal');
        if (modal) {
            modal.style.display = 'block';
        } else {
            console.error('Override modal element not found');
        }
    } catch (error) {
        console.error('Error loading student details for override:', error);
        showToast('Error loading student details: ' + error.message, 'danger');
    }
}

// Search courses for override
// Search courses for override
let courseSearchTimeout = null;
document.addEventListener('DOMContentLoaded', () => {
    const courseSearchInput = document.getElementById('courseSearch');
    console.log('courseSearch found:', courseSearchInput);
    if (courseSearchInput) {
        courseSearchInput.addEventListener('input', (e) => {
            const query = e.target.value.trim();
            
            if (courseSearchTimeout) {
                clearTimeout(courseSearchTimeout);
            }
            
            courseSearchTimeout = setTimeout(async () => {
                if (query.length < 2) {
                    document.getElementById('courseSearchResults').innerHTML = '';
                    return;
                }
                
                try {
                    console.log('Searching courses with query:', query);
                    const response = await fetch(`/api/admin/courses/searchmodal?query=${encodeURIComponent(query)}`);
                    if (!response || !response.ok) {
                        throw new Error(`Server responded with status: ${response?.status}`);
                    }
                    
                    const courses = await response.json();
                    console.log('Course search results:', JSON.stringify(courses));
                    displayCourseSearchResults(courses);
                } catch (error) {
                    console.error('Error searching courses:', error);
                    showToast('Error searching courses: ' + error.message, 'danger');
                }
            }, 300);
        });
    } else {
        console.warn('Course search input element not found');
    }
});

// Display course search results
function displayCourseSearchResults(courses) {
    const resultsContainer = document.getElementById('courseSearchResults');
    if (!resultsContainer) {
        console.error('Course search results container not found');
        return;
    }
    
    resultsContainer.innerHTML = '';
    
    if (!Array.isArray(courses) || courses.length === 0) {
        resultsContainer.innerHTML = '<p>No courses found</p>';
        return;
    }
    
    courses.forEach(course => {
        // Safely access course properties
        const registeredCount = course.registeredStudents ? course.registeredStudents.length : 0;
        const capacity = course.capacity || 0;
        const isFull = registeredCount >= capacity;
        
        const item = document.createElement('div');
        item.className = 'course-result-item';
        item.innerHTML = `
            <div class="course-code">${course.code || 'N/A'} - ${course.name || 'N/A'}</div>
            <div class="enrollment-status ${isFull ? 'full' : ''}">
                Enrollment: ${registeredCount}/${capacity}
                ${isFull ? ' (Full)' : ''}
            </div>
        `;
        
        item.addEventListener('click', () => selectCourse(course));
        resultsContainer.appendChild(item);
    });
}

// Select course for override
function selectCourse(course) {
    if (!course || !course._id) {
        console.error('Invalid course object', course);
        return;
    }
    
    selectedCourseId = course._id;
    console.log('Selected course:', course);
    
    // Safely access course properties
    const registeredCount = course.registeredStudents ? course.registeredStudents.length : 0;
    const capacity = course.capacity || 0;
    
    const selectedCourseInfo = document.getElementById('selectedCourseInfo');
    if (!selectedCourseInfo) {
        console.error('Selected course info element not found');
        return;
    }
    
    selectedCourseInfo.innerHTML = `
        <div class="course-info">
            <span class="course-code">${course.code || 'N/A'}</span>
            <span class="course-name">${course.name || 'N/A'}</span>
        </div>
        <div class="enrollment-status ${registeredCount >= capacity ? 'full' : ''}">
            ${registeredCount}/${capacity}
        </div>
    `;
    
    const enrollmentWarning = document.getElementById('enrollmentWarning');
    if (enrollmentWarning) {
        if (registeredCount >= capacity) {
            enrollmentWarning.innerHTML = 'Warning: This course is full. The override will exceed the maximum enrollment.';
        } else {
            enrollmentWarning.innerHTML = '';
        }
    }
    
    const selectedCourse = document.getElementById('selectedCourse');
    if (selectedCourse) {
        selectedCourse.style.display = 'block';
    }
    
    const confirmOverrideBtn = document.getElementById('confirmOverrideBtn');
    if (confirmOverrideBtn) {
        confirmOverrideBtn.disabled = false;
    }
    
    // Clear search results
    const courseSearchResults = document.getElementById('courseSearchResults');
    if (courseSearchResults) {
        courseSearchResults.innerHTML = '';
    }
    
    const courseSearch = document.getElementById('courseSearch');
    if (courseSearch) {
        courseSearch.value = '';
    }
}

// Confirm override registration
document.addEventListener('DOMContentLoaded', () => {
    const confirmOverrideBtn = document.getElementById('confirmOverrideBtn');
    if (confirmOverrideBtn) {
        confirmOverrideBtn.addEventListener('click', async () => {
            if (!currentStudentId || !selectedCourseId) {
                showToast('Student or course not selected', 'danger');
                return;
            }
            
            try {
                console.log('Confirming override for student:', currentStudentId, 'course:', selectedCourseId);
                const response = await fetchWithAuth(`/api/admin/students/${currentStudentId}/override`, {
                    method: 'POST',
                    body: { courseId: selectedCourseId }
                });
                
                if (!response || !response.ok) {
                    throw new Error(`Server responded with status: ${response?.status}`);
                }
                
                const data = await response.json();
                console.log('Override response:', data);
                showToast('Registration override successful', 'success');
                
                // Close modal and refresh data
                const overrideModal = document.getElementById('overrideModal');
                if (overrideModal) {
                    overrideModal.style.display = 'none';
                }
                
                loadStudents();
            } catch (error) {
                console.error('Error overriding registration:', error);
                showToast('Error overriding registration: ' + error.message, 'danger');
            }
        });
    } else {
        console.warn('Confirm override button not found');
    }
});

// Remove course from student
async function removeCourse(studentId, courseId) {
    if (!confirm('Are you sure you want to remove this course from the student?')) {
        return;
    }
    
    try {
        console.log('Removing course:', courseId, 'from student:', studentId);
        const response = await fetchWithAuth(`/api/admin/students/${studentId}/removeCourse`, {
            method: 'POST',
            body: { courseId }
        });
        
        if (!response || !response.ok) {
            throw new Error(`Server responded with status: ${response?.status}`);
        }
        
        const data = await response.json();
        console.log('Course removal response:', data);
        showToast('Course removed successfully', 'success');
        
        // Refresh student details
        viewStudent(studentId);
        
        // Refresh student list
        loadStudents();
    } catch (error) {
        console.error('Error removing course:', error);
        showToast('Error removing course: ' + error.message, 'danger');
    }
}

// Toast notification
function showToast(message, type) {
    console.log('Toast:', message, type);
    
    // Check if toast element exists, if not create it
    let toast = document.getElementById('toast');
    if (!toast) {
        toast = document.createElement('div');
        toast.id = 'toast';
        toast.className = 'toast';
        document.body.appendChild(toast);
        
        // Add basic toast styles if not defined in CSS
        toast.style.position = 'fixed';
        toast.style.bottom = '20px';
        toast.style.right = '20px';
        toast.style.padding = '12px 20px';
        toast.style.borderRadius = '4px';
        toast.style.fontSize = '14px';
        toast.style.zIndex = '10000';
        toast.style.minWidth = '250px';
        toast.style.textAlign = 'center';
        toast.style.transition = 'opacity 0.3s ease-in-out';
    }
    
    toast.textContent = message;
    
    // Apply type-specific styles
    if (type === 'success') {
        toast.style.backgroundColor = 'rgba(40, 167, 69, 0.9)';
        toast.style.color = 'white';
    } else if (type === 'danger') {
        toast.style.backgroundColor = 'rgba(220, 53, 69, 0.9)';
        toast.style.color = 'white';
    } else if (type === 'warning') {
        toast.style.backgroundColor = 'rgba(255, 193, 7, 0.9)';
        toast.style.color = 'black';
    } else {
        toast.style.backgroundColor = 'rgba(0, 123, 255, 0.9)';
        toast.style.color = 'white';
    }
    
    toast.classList.add('show');
    toast.style.opacity = '1';
    
    setTimeout(() => {
        toast.style.opacity = '0';
        setTimeout(() => {
            toast.classList.remove('show');
        }, 300);
    }, 3000);
}

// Modal handling
document.addEventListener('DOMContentLoaded', () => {
    // Set up close handlers for modals
    const studentModal = document.getElementById('studentModal');
    const overrideModal = document.getElementById('overrideModal');
    
    if (studentModal) {
        const studentModalClose = studentModal.querySelector('.close');
        if (studentModalClose) {
            studentModalClose.onclick = function() {
                studentModal.style.display = 'none';
            };
        }
    }
    
    if (overrideModal) {
        const overrideModalClose = overrideModal.querySelector('.close');
        if (overrideModalClose) {
            overrideModalClose.onclick = function() {
                overrideModal.style.display = 'none';
            };
        }
    }
    
    // Global click handler for modals
    window.onclick = function(event) {
        if (studentModal && event.target == studentModal) {
            studentModal.style.display = 'none';
        }
        if (overrideModal && event.target == overrideModal) {
            overrideModal.style.display = 'none';
        }
    };
    
    // Set up logout functionality
    const logoutBtn = document.getElementById('logoutBtn');
    if (logoutBtn) {
        logoutBtn.addEventListener('click', function() {
            localStorage.removeItem('adminToken');
            window.location.href = '/admin/login';
        });
    }
    
    // Set up search functionality for student list
    const searchInput = document.getElementById('searchInput');
    if (searchInput) {
        searchInput.addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('#studentList tr');
            
            rows.forEach(row => {
                if (row.cells && row.cells.length >= 2) {
                    const rollNumber = row.cells[0].textContent.toLowerCase();
                    const name = row.cells[1].textContent.toLowerCase();
                    
                    if (rollNumber.includes(searchTerm) || name.includes(searchTerm)) {
                        row.style.display = '';
                    } else {
                        row.style.display = 'none';
                    }
                }
            });
        });
    }
    
    // Load students on page load
    console.log('DOM Content Loaded - Initializing student management system');
    loadStudents();
});
    </script>
</body>
</html> 