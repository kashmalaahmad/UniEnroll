<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Course Registration - Course Registration System</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- Bootstrap Icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.2/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link href="/css/student.css" rel="stylesheet">
</head>
<body>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <nav id="sidebar" class="col-md-3 col-lg-2 d-md-block bg-dark sidebar collapse">
                <div class="position-sticky pt-3">
                    <ul class="nav flex-column">
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/student/dashboard">
                                <i class="bi bi-house-door me-2"></i>Overview
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link active text-white" href="/student/courses">
                                <i class="bi bi-book me-2"></i>Course Registration
                            </a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link text-white" href="/student/schedule">
                                <i class="bi bi-calendar3 me-2"></i>My Schedule
                            </a>
                        </li>
                        <li class="nav-item mt-3">
                            <a class="nav-link text-white" href="#" id="logoutBtn">
                                <i class="bi bi-box-arrow-right me-2"></i>Logout
                            </a>
                        </li>
                    </ul>
                </div>
            </nav>

            <!-- Main content -->
            <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4">
                <div id="content">
                    <h2 class="mt-4">Course Registration</h2>
                    <div class="row mt-4">
                        <div class="col-md-8">
                            <div class="card">
                                <div class="card-header">
                                    <h5>Available Courses</h5>
                                </div>
                                <div class="card-body">
                                    <div class="table-responsive">
                                        <table class="table table-hover">
                                            <thead>
                                                <tr>
                                                    <th>Course Code</th>
                                                    <th>Course Name</th>
                                                    <th>Credits</th>
                                                    <th>Action</th>
                                                </tr>
                                            </thead>
                                            <tbody id="availableCourses">
                                                <!-- Courses will be loaded dynamically -->
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card">
                                <div class="card-header">
                                    <h5>Currently Registered</h5>
                                </div>
                                <div class="card-body">
                                    <ul class="list-group" id="registeredCoursesList">
                                        <!-- Registered courses will be loaded dynamically -->
                                    </ul>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </main>
        </div>
    </div>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3"></div>

    <!-- Loading Spinner -->
    <div id="loadingSpinner" class="spinner-overlay d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Check for authentication
        const token = localStorage.getItem('studentToken');
        if (!token) {
            window.location.href = '/student/login';
            throw new Error('No token found');
        }
    
        // Add token to all fetch requests
        async function fetchWithAuth(url, options = {}) {
            const token = localStorage.getItem('studentToken');
            if (!token) {
                window.location.href = '/student/login';
                throw new Error('No token found');
            }
    
            const headers = new Headers({
                'Authorization': `Bearer ${token}`,
                'Content-Type': 'application/json'
            });
    
            try {
                const response = await fetch(url, {
                    method: options.method || 'GET',
                    headers: headers,
                    body: options.body ? JSON.stringify(options.body) : undefined
                });
    
                if (response.status === 401 || response.status === 403) {
                    localStorage.removeItem('studentToken');
                    localStorage.removeItem('student');
                    document.cookie = 'studentToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
                    window.location.href = '/student/login';
                    return null;
                }
    
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || 'Something went wrong');
                }
    
                return response;
            } catch (error) {
                console.error('Fetch error:', error);
                throw error;
            }
        }
    
        // Show/hide loading spinner
        function toggleLoadingSpinner(show) {
            const spinner = document.getElementById('loadingSpinner');
            if (show) {
                spinner.classList.remove('d-none');
            } else {
                spinner.classList.add('d-none');
            }
        }
    
        // Show toast notification
        function showToast(message, type = 'success') {
            const toastContainer = document.querySelector('.toast-container');
            const toast = document.createElement('div');
            toast.className = `toast align-items-center text-white bg-${type} border-0`;
            toast.setAttribute('role', 'alert');
            toast.setAttribute('aria-live', 'assertive');
            toast.setAttribute('aria-atomic', 'true');
            
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `;
            
            toastContainer.appendChild(toast);
            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();
            
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }
    
        // Load course data
        async function loadCourseData() {
            toggleLoadingSpinner(true);
            try {
                // Use try/catch for each request to handle individual failures
                let availableData = { courses: [] };
                let registeredData = { courses: [] };
                
                try {
                    const availableResponse = await fetchWithAuth('/api/student/courses');
                    if (availableResponse) {
                        availableData = await availableResponse.json();
                    }
                } catch (error) {
                    console.error('Error fetching available courses:', error);
                    showToast('Error loading available courses', 'danger');
                }
                
                try {
                    const registeredResponse = await fetchWithAuth('/api/student/courses/registered');
                    if (registeredResponse) {
                        registeredData = await registeredResponse.json();
                    }
                } catch (error) {
                    console.error('Error fetching registered courses:', error);
                    showToast('Error loading registered courses', 'danger');
                }
                
                const registeredCourseIds = registeredData.courses.map(course => course.id);
    
                // Update available courses table
                const availableCoursesTable = document.getElementById('availableCourses');
                availableCoursesTable.innerHTML = availableData.courses.length > 0 
                    ? availableData.courses.map(course => `
                        <tr>
                            <td>${course.code}</td>
                            <td>${course.name}</td>
                            <td>${course.credits}</td>
                            <td>
                                ${registeredCourseIds.includes(course.id) 
                                    ? `<button class="btn btn-sm btn-danger drop-course" data-id="${course.id}">Drop</button>`
                                    : `<button class="btn btn-sm btn-primary register-course" data-id="${course.id}">Register</button>`
                                }
                            </td>
                        </tr>
                    `).join('')
                    : '<tr><td colspan="4" class="text-center">No available courses found</td></tr>';
    
                // Update registered courses list
                const registeredCoursesList = document.getElementById('registeredCoursesList');
                registeredCoursesList.innerHTML = registeredData.courses.length > 0 
                    ? registeredData.courses.map(course => `
                        <li class="list-group-item d-flex justify-content-between align-items-center">
                            ${course.code} - ${course.name}
                            <span class="badge bg-primary rounded-pill">${course.credits}</span>
                        </li>
                    `).join('')
                    : '<li class="list-group-item">No courses registered yet</li>';
    
                // Add event listeners for register/drop buttons
                document.querySelectorAll('.register-course').forEach(button => {
    button.addEventListener('click', async () => {
        const courseId = button.dataset.id;
        try {
            toggleLoadingSpinner(true);
            const response = await fetchWithAuth('/api/student/courses/register', {
                method: 'POST',
                body: { courseId }
            });
            if (response) {
                const data = await response.json();
                showToast(data.message || 'Course registered successfully', 'success');
                loadCourseData(); // Reloads both available and registered courses
            }
        } catch (error) {
            showToast(error.message || 'Error registering course', 'danger');
        } finally {
            toggleLoadingSpinner(false);
        }
    });
});
                document.querySelectorAll('.drop-course').forEach(button => {
                    button.addEventListener('click', async () => {
                        const courseId = button.dataset.id;
                        try {
                            toggleLoadingSpinner(true);
                            const response = await fetchWithAuth(`/api/student/courses/drop/${courseId}`, {
                                method: 'POST'
                            });
                            if (response) {
                                const data = await response.json();
                                showToast(data.message || 'Course dropped successfully', 'success');
                                loadCourseData(); // Reload the data
                            }
                        } catch (error) {
                            showToast(error.message || 'Error dropping course', 'danger');
                        } finally {
                            toggleLoadingSpinner(false);
                        }
                    });
                });
            } catch (error) {
                console.error('Course data error:', error);
                showToast('Error loading course data', 'danger');
            } finally {
                toggleLoadingSpinner(false);
            }
        }
    
        // Logout handler
        document.getElementById('logoutBtn').addEventListener('click', (e) => {
            e.preventDefault();
            localStorage.removeItem('studentToken');
            localStorage.removeItem('student');
            document.cookie = 'studentToken=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
            window.location.href = '/student/login';
        });
    
        // Load initial data
        loadCourseData();
    </script>
</body>
</html>